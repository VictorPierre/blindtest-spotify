{"version":3,"sources":["logo.svg","loading.svg","Button.js","App.js","registerServiceWorker.js","index.js"],"names":["module","exports","Button","props","onClick","children","shuffleArray","array","counter","length","index","getRandomNumber","temp","x","Math","floor","random","App","state","text","songsLoaded","tracks","selected_tracks","currentSongId","this","setState","fetch","method","headers","Authorization","then","response","json","data","items","slice","initGame","console","log","id","swal","n","src","loading","className","alt","logo","track","name","url","preview_url","playStatus","Sound","status","PLAYING","checkAnswer","Component","AlbumCover","album","images","style","width","height","isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","navigator","serviceWorker","register","registration","onupdatefound","installingWorker","installing","onstatechange","controller","catch","error","ReactDOM","render","document","getElementById","URL","process","origin","addEventListener","get","indexOf","ready","unregister","reload","checkValidServiceWorker","registerServiceWorker"],"mappings":"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","file":"static/js/main.2a5d41c0.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/logo.79f6b6a0.svg\";","module.exports = __webpack_public_path__ + \"static/media/loading.9d4cbf40.svg\";","import React from 'react';\nimport './Button.css';\n\nconst Button = (props) => (\n  <button onClick={props.onClick}>{props.children}</button>\n);\n\nexport default Button;\n","/*global swal*/\n\nimport React, { Component } from 'react';\nimport logo from './logo.svg';\nimport loading from './loading.svg';\nimport './App.css';\nimport Sound from 'react-sound';\nimport Button from './Button';\n\nconst apiToken = 'BQDcaf1mwYpDZimOEMPhMtNlQNVyouET7S45MQUs1-F71HcQ57ugN7Kht5r4HNnle_Pj5WFbNqUFlT_8_Fse2xizfjxJnucn6mjqNPbAAceV-FjOQ-UkD6_TZq706EPjTraHmyzoCFjyY42n7d3eGXDpQfhL12p3P62NeQFP8FUqaw';\n\nfunction shuffleArray(array) {\n  let counter = array.length;\n\n  while (counter > 0) {\n    let index = getRandomNumber(counter);\n    counter--;\n    let temp = array[counter];\n    array[counter] = array[index];\n    array[index] = temp;\n  }\n\n  return array;\n}\n\n/* Return a random number between 0 included and x excluded */\nfunction getRandomNumber(x) {\n  return Math.floor(Math.random() * x);\n} \n\n\n\n\nclass App extends Component {\n\n  constructor() {\n    super();\n    this.state = {\n      text: \"\",\n      songsLoaded: false,\n      tracks:[],\n      selected_tracks: [],\n      currentSongId: 0,\n    };\n  }\n\n  componentDidMount() {\n    this.setState({ text: \"Le composent est bien monté\" })\n    fetch('https://api.spotify.com/v1/me/tracks', {\n      method: 'GET',\n      headers: {\n       Authorization: 'Bearer ' + apiToken,\n      },\n    })\n      .then(response => response.json())\n      .then((data) => {\n        this.setState({ songsLoaded: true, tracks: data.items, selected_tracks: shuffleArray(data.items).slice(0,3), currentSongId: getRandomNumber(3)});\n        this.initGame(3);\n        console.log(\"Réponse reçue ! Voilà ce que j'ai reçu : \", data);\n      })\n  }\n\n  checkAnswer(id){\n    if (id==this.state.currentSongId){\n      swal('Bravo', 'Sous-titre', 'success').then(this.initGame(3));\n    } else {\n      swal('Raté', 'Sous-titre', 'error');\n    }\n  }\n\n  initGame(n){\n    this.setState({selected_tracks: shuffleArray(this.state.tracks), currentSongId: getRandomNumber(n)});\n  }\n\n  render() {\n    if (this.state.songsLoaded==false) {\n      return (\n        <img src={loading} className=\"App-logo\" alt=\"logo\"/>\n      )\n    } else {\n      return (\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <img src={logo} className=\"App-logo\" alt=\"logo\"/>\n            <h1 className=\"App-title\">Bienvenue sur le Blindtest</h1>\n          </header>\n\n          <div className=\"App-images\">\n            <AlbumCover track={this.state.selected_tracks[this.state.currentSongId].track}/>\n          </div>\n\n          <p>{this.state.tracks.length} chansons disponibles</p>\n          <p>Chanson selectionnée: {this.state.selected_tracks[this.state.currentSongId].track.name}</p>\n          <Sound url={this.state.selected_tracks[this.state.currentSongId].track.preview_url} playStatus={Sound.status.PLAYING}/>\n\n          <div className=\"App-buttons\">\n            <Button onClick={() => this.checkAnswer(0)}>{this.state.selected_tracks[0].track.name}</Button>\n            <Button onClick={() => this.checkAnswer(1)}>{this.state.selected_tracks[1].track.name}</Button>\n            <Button onClick={() => this.checkAnswer(2)}>{this.state.selected_tracks[2].track.name}</Button>\n          </div>\n        </div>\n      );\n    }\n  }\n}\n\nclass AlbumCover extends Component {\n  render() {\n    const src = this.props.track.album.images[0].url;\n    return (<img src={src} style={{ width: 400, height: 400 }} />);\n  }\n}\n\nexport default App;\n","// In production, we register a service worker to serve assets from local cache.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on the \"N+1\" visit to a page, since previously\n// cached resources are updated in the background.\n\n// To learn more about the benefits of this model, read https://goo.gl/KwvDNy.\n// This link also includes instructions on opting out of this behavior.\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport default function register() {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebookincubator/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Lets check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl);\n      } else {\n        // Is not local host. Just register service worker\n        registerValidSW(swUrl);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the old content will have been purged and\n              // the fresh content will have been added to the cache.\n              // It's the perfect time to display a \"New content is\n              // available; please refresh.\" message in your web app.\n              console.log('New content is available; please refresh.');\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      if (\n        response.status === 404 ||\n        response.headers.get('content-type').indexOf('javascript') === -1\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport registerServiceWorker from './registerServiceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\nregisterServiceWorker();\n"],"sourceRoot":""}